stack<int> s;
stack<int> mins;

MinStack::MinStack() {
    while(!s.empty())
    {
        s.pop();
    }
    while(!mins.empty())
    {
        mins.pop();
    }
}

void MinStack::push(int x) {
    s.push(x);
    if(mins.size() == 0)
    {
        mins.push(x);
    }
    else
    {
        mins.push((x <= mins.top()) ? x : mins.top());
    }
}

void MinStack::pop() {
    if(!s.empty())
    {
        s.pop();
        mins.pop();
    }
}

int MinStack::top() {
    if(s.size() == 0)
    {
        return -1;
    }
    return s.top();
}

int MinStack::getMin() {
    if(mins.size() == 0)
    {
        return -1;
    }
    return mins.top();
}

